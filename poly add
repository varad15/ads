#include <stdio.h>
#include <stdlib.h>

// Definition of the Node structure
typedef struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int coefficient, int exponent) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coefficient = coefficient;
    newNode->exponent = exponent;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a new term in the polynomial
void insertTerm(Node** poly, int coefficient, int exponent) {
    Node* newNode = createNode(coefficient, exponent);
    if (*poly == NULL || (*poly)->exponent < exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        Node* current = *poly;
        while (current->next != NULL && current->next->exponent > exponent) {
            current = current->next;
        }
        if (current->next != NULL && current->next->exponent == exponent) {
            current->next->coefficient += coefficient;
        } else {
            newNode->next = current->next;
            current->next = newNode;
        }
    }
}

// Function to add two polynomials
Node* addPolynomials(Node* poly1, Node* poly2) {
    Node* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            insertTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to display a polynomial
void displayPolynomial(Node* poly) {
    while (poly != NULL) {
        printf("%dx^%d", poly->coefficient, poly->exponent);
        poly = poly->next;
        if (poly != NULL) {
            printf(" + ");
        }
    }
    printf("\n");
}

// Function to read a polynomial from the user
Node* readPolynomial() {
    Node* poly = NULL;
    int n, coefficient, exponent;

    printf("Enter the number of terms in the polynomial: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter coefficient and exponent for term %d: ", i + 1);
        scanf("%d %d", &coefficient, &exponent);
        insertTerm(&poly, coefficient, exponent);
    }

    return poly;
}

// Main function to demonstrate polynomial addition
int main() {
    printf("Enter the first polynomial:\n");
    Node* poly1 = readPolynomial();

    printf("Enter the second polynomial:\n");
    Node* poly2 = readPolynomial();

    printf("Polynomial 1: ");
    displayPolynomial(poly1);

    printf("Polynomial 2: ");
    displayPolynomial(poly2);

    Node* sum = addPolynomials(poly1, poly2);
    printf("Sum of Polynomials: ");
    displayPolynomial(sum);

    return 0;
}
Enter the first polynomial:
Enter the number of terms in the polynomial: 3
Enter coefficient and exponent for term 1: 3 2
Enter coefficient and exponent for term 2: 5 1
Enter coefficient and exponent for term 3: 6 0

Enter the second polynomial:
Enter the number of terms in the polynomial: 2
Enter coefficient and exponent for term 1: 8 1
Enter coefficient and exponent for term 2: 4 0
