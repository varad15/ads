#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Queue structure for BFS
typedef struct {
    int items[MAX];
    int front;
    int rear;
} Queue;

// Function to initialize the queue
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is empty
int isEmpty(Queue* q) {
    return q->rear == -1;
}

// Function to enqueue an element into the queue
void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1)
        printf("\nQueue is full!");
    else {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

// Function to dequeue an element from the queue
int dequeue(Queue* q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty!");
        item = -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
    }
    return item;
}

// Function to perform BFS traversal on the graph
void BFS(int adjMatrix[MAX][MAX], int startVertex, int n) {
    Queue q;
    initQueue(&q);

    int visited[MAX] = {0};
    int vertex;

    printf("BFS Traversal starting from vertex %d:\n", startVertex);

    visited[startVertex] = 1;
    enqueue(&q, startVertex);

    while (!isEmpty(&q)) {
        vertex = dequeue(&q);
        printf("%d ", vertex);

        for (int i = 0; i < n; i++) {
            if (adjMatrix[vertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

int main() {
    int adjMatrix[MAX][MAX];
    int n, edges;
    int u, v;

    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &n);

    // Initialize adjacency matrix to 0
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            adjMatrix[i][j] = 0;
        }
    }

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    printf("Enter the edges (u v):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1; // Assuming an undirected graph
    }

    int startVertex;
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &startVertex);

    BFS(adjMatrix, startVertex, n);

    return 0;
}
input
Enter the number of vertices in the graph: 5
Enter the number of edges: 6
Enter the edges (u v):
0 1
0 2
1 2
1 3
2 4
3 4
Enter the starting vertex for BFS: 0
