#include <stdio.h>
#include <limits.h>

#define MAX 100
#define INF INT_MAX

int graph[MAX][MAX], dist[MAX], visited[MAX];
int n;

int minDistance() {
    int min = INF, min_index;
    for (int v = 0; v < n; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void dijkstra(int src, int target) {
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }
    dist[src] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = minDistance();
        visited[u] = 1;
        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printf("Shortest distance from node %d to node %d is %d\n", src, target, dist[target]);
}

int main() {
    int src, target;

    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (enter '#' for no connection):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            char temp;
            scanf(" %c", &temp);
            if (temp == '#') {
                graph[i][j] = INF;
            } else {
                graph[i][j] = temp - '0';
            }
        }
    }

    printf("Enter the source node: ");
    scanf("%d", &src);

    printf("Enter the target node: ");
    scanf("%d", &target);

    dijkstra(src, target);

    return 0;
}
Enter the number of vertices in the graph: 4
Enter the adjacency matrix (enter INF for no connection):
0 2 INF 1
INF 0 3 INF
INF INF 0 INF
INF INF INF 0
Enter the source node: 0
Enter the target node: 3
