#include <stdio.h>
#include <stdlib.h>

// Define the Node structure
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to perform level-wise traversal using a queue
void levelOrderTraversal(struct Node* root) {
    if (root == NULL) {
        return;
    }

    struct Node* queue[100];  // Adjust queue size as needed
    int front = -1, rear = -1;

    queue[++rear] = root;
    while (front != rear) {
        int levelSize = rear - front;

        for (int i = 0; i < levelSize; i++) {
            struct Node* currentNode = queue[++front];
            printf("%d ", currentNode->data);

            if (currentNode->left) {
                queue[++rear] = currentNode->left;
            }
            if (currentNode->right) {
                queue[++rear] = currentNode->right;
            }
        }
    }
    printf("\n");
}

// Function to display leaf nodes (nodes with no children)
void displayLeafNodes(struct Node* root) {
    if (root == NULL) {
        return;
    }

    struct Node* queue[100]; // Adjust queue size as needed
    int front = -1, rear = -1;

    queue[++rear] = root;
    while (front != rear) {
        struct Node* currentNode = queue[++front];

        if (currentNode->left == NULL && currentNode->right == NULL) {
            printf("%d ", currentNode->data);
        } else {
            if (currentNode->left) {
                queue[++rear] = currentNode->left;
            }
            if (currentNode->right) {
                queue[++rear] = currentNode->right;
            }
        }
    }
    printf("\n");
}

// Function to count the total number of leaf nodes
int countLeafNodes(struct Node* root) {
    if (root == NULL) {
        return 0;
    }

    int count = 0;
    struct Node* queue[100]; // Adjust queue size as needed
    int front = -1, rear = -1;

    queue[++rear] = root;
    while (front != rear) {
        struct Node* currentNode = queue[++front];

        if (currentNode->left == NULL && currentNode->right == NULL) {
            count++;
        } else {
            if (currentNode->left) {
                queue[++rear] = currentNode->left;
            }
            if (currentNode->right) {
                queue[++rear] = currentNode->right;
            }
        }
    }

    return count;
}

// Function to calculate the height of the tree (using level order traversal)
int calculateHeight(struct Node* root) {
    if (root == NULL) {
        return 0;  // Height of an empty tree is 0
    }

    int height = 0;
    struct Node* queue[100]; // Adjust queue size as needed
    int front = -1, rear = -1;

    queue[++rear] = root;
    while (front != rear) {
        int levelSize = rear - front;

        for (int i = 0; i < levelSize; i++) {
            struct Node* currentNode = queue[++front];

            if (currentNode->left) {
                queue[++rear] = currentNode->left;
            }
            if (currentNode->right) {
                queue[++rear] = currentNode->right;
            }
        }
        height++;
    }

    return height;
}

int main() {
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("Level-wise traversal: ");
    levelOrderTraversal(root);

    printf("Leaf nodes: ");
    displayLeafNodes(root);

    int leafCount = countLeafNodes(root);
    printf("Number of total leaf nodes: %d\n", leafCount);

    int treeHeight = calculateHeight(root);
    printf("Height of the tree: %d\n", treeHeight);

    return 0;
}
