#include <stdio.h>
#include <stdlib.h>

// Define a structure for the tree node
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

// Define a structure for the queue node
typedef struct QueueNode {
    struct Node *node;
    struct QueueNode *next;
} QueueNode;

// Define a structure for the queue
typedef struct {
    QueueNode *front;
    QueueNode *rear;
} Queue;

// Function to create a new tree node
struct Node *createNode(int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to create a new queue node
QueueNode *createQueueNode(struct Node *node) {
    QueueNode *newNode = (QueueNode *)malloc(sizeof(QueueNode));
    newNode->node = node;
    newNode->next = NULL;
    return newNode;
}

// Function to initialize the queue
void initQueue(Queue *queue) {
    queue->front = queue->rear = NULL;
}

// Function to check if the queue is empty
int isEmpty(Queue *queue) {
    return queue->front == NULL;
}

// Function to enqueue a tree node
void enqueue(Queue *queue, struct Node *node) {
    QueueNode *newNode = createQueueNode(node);
    if (isEmpty(queue)) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}

// Function to dequeue a tree node
struct Node *dequeue(Queue *queue) {
    if (isEmpty(queue)) return NULL;
    QueueNode *temp = queue->front;
    struct Node *node = temp->node;
    queue->front = queue->front->next;
    free(temp);
    if (queue->front == NULL) queue->rear = NULL;
    return node;
}

void preorderTraversal(struct Node *root) {
    if (root == NULL) {
        return;
    }

    struct Node *stack[100];  // Adjust stack size as needed
    int top = -1;

    stack[++top] = root;
    while (top > -1) {
        struct Node *currentNode = stack[top--];
        printf("%d ", currentNode->data);

        if (currentNode->right) {
            stack[++top] = currentNode->right;
        }
        if (currentNode->left) {
            stack[++top] = currentNode->left;
        }
    }
}

int countLeafNodes(struct Node *root) {
    if (root == NULL) {
        return 0;
    }

    int count = 0;
    Queue q;
    initQueue(&q);
    enqueue(&q, root);
    while (!isEmpty(&q)) {
        struct Node *currentNode = dequeue(&q);

        if (currentNode->left == NULL && currentNode->right == NULL) {
            count++;
        } else {
            if (currentNode->left) {
                enqueue(&q, currentNode->left);
            }
            if (currentNode->right) {
                enqueue(&q, currentNode->right);
            }
        }
    }

    return count;
}

int countTotalNodes(struct Node *root) {
    if (root == NULL) {
        return 0;
    }

    int count = 0;
    Queue q;
    initQueue(&q);
    enqueue(&q, root);
    while (!isEmpty(&q)) {
        struct Node *currentNode = dequeue(&q);
        count++;

        if (currentNode->left) {
            enqueue(&q, currentNode->left);
        }
        if (currentNode->right) {
            enqueue(&q, currentNode->right);
        }
    }

    return count;
}

int calculateHeight(struct Node *root) {
    if (root == NULL) {
        return -1;  // Height of an empty tree is -1
    }

    int height = -1;
    Queue q;
    initQueue(&q);
    enqueue(&q, root);
    while (!isEmpty(&q)) {
        int levelSize = queueSize(&q);
        height++;

        for (int i = 0; i < levelSize; i++) {
            struct Node *currentNode = dequeue(&q);

            if (currentNode->left) {
                enqueue(&q, currentNode->left);
            }
            if (currentNode->right) {
                enqueue(&q, currentNode->right);
            }
        }
    }

    return height;
}

// Function to get the size of the queue
int queueSize(Queue *queue) {
    int size = 0;
    QueueNode *current = queue->front;
    while (current != NULL) {
        size++;
        current = current->next;
    }
    return size;
}

int main() {
    struct Node *root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("Preorder traversal: ");
    preorderTraversal(root);
    printf("\n");

    int leafNodes = countLeafNodes(root);
    printf("Number of leaf nodes: %d\n", leafNodes);

    int totalNodes = countTotalNodes(root);
    printf("Number of total nodes: %d\n", totalNodes);

    int treeHeight = calculateHeight(root);
    printf("Height of the tree: %d\n", treeHeight);

    return 0;
}
