//inorder tbt and Traverse it in Inorder way.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a threaded binary tree node
struct ThreadedNode {
    int data;
    struct ThreadedNode *left, *right;
    int lTag, rTag; // Left and Right Thread flags
};

// Function to create a new threaded binary tree node
struct ThreadedNode* createNode(int data) {
    struct ThreadedNode* newNode = (struct ThreadedNode*)malloc(sizeof(struct ThreadedNode));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    newNode->lTag = newNode->rTag = 1; // Initializing as thread
    return newNode;
}

// Helper function to insert a new node in the threaded binary tree
struct ThreadedNode* insert(struct ThreadedNode* root, int data) {
    struct ThreadedNode *current = root, *parent = NULL;
    while (current != NULL) {
        if (data == current->data) {
            return root; // Duplicate data is not allowed
        }
        parent = current;
        if (data < current->data) {
            if (current->lTag == 0) {
                current = current->left;
            } else {
                break;
            }
        } else {
            if (current->rTag == 0) {
                current = current->right;
            } else {
                break;
            }
        }
    }

    struct ThreadedNode* newNode = createNode(data);
    if (parent == NULL) {
        root = newNode;
    } else if (data < parent->data) {
        newNode->left = parent->left;
        newNode->right = parent;
        parent->lTag = 0;
        parent->left = newNode;
    } else {
        newNode->right = parent->right;
        newNode->left = parent;
        parent->rTag = 0;
        parent->right = newNode;
    }
    return root;
}

// Function to find the leftmost node in the tree
struct ThreadedNode* leftmost(struct ThreadedNode* node) {
    if (node == NULL) {
        return NULL;
    }
    while (node->lTag == 0) {
        node = node->left;
    }
    return node;
}

// Function to traverse the threaded binary tree in Inorder
void inorderTraversal(struct ThreadedNode* root) {
    struct ThreadedNode* current = leftmost(root);
    while (current != NULL) {
        printf("%d ", current->data);

        if (current->rTag == 1) {
            current = current->right;
        } else {
            current = leftmost(current->right);
        }
    }
}

int main() {
    struct ThreadedNode* root = NULL;
    int choice, data;

    printf("Threaded Binary Tree Operations:\n");
    printf("1. Insert Node\n");
    printf("2. Inorder Traversal\n");
    printf("3. Exit\n");

    while (1) {
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insert(root, data);
                break;
            case 2:
                printf("Inorder Traversal of Threaded Binary Tree: ");
                inorderTraversal(root);
                printf("\n");
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
