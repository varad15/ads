#include <stdio.h>
#include <stdlib.h>

// Structure to represent an adjacency list node
typedef struct AdjListNode {
    int dest;
    struct AdjListNode* next;
} AdjListNode;

// Structure to represent an adjacency list
typedef struct AdjList {
    struct AdjListNode* head;
} AdjList;

// Structure to represent a graph
typedef struct Graph {
    int V;
    struct AdjList* array;
} Graph;

// Function to create a new adjacency list node
AdjListNode* newAdjListNode(int dest) {
    AdjListNode* newNode = (AdjListNode*)malloc(sizeof(AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
Graph* createGraph(int V) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->V = V;
    graph->array = (AdjList*)malloc(V * sizeof(AdjList));
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;
    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(Graph* graph, int src, int dest) {
    AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to perform DFS traversal from a given vertex
void DFSUtil(Graph* graph, int v, int visited[]) {
    // Stack for DFS
    int stack[graph->V];
    int top = -1;

    // Push the start vertex onto the stack
    stack[++top] = v;

    while (top != -1) {
        int currentVertex = stack[top--];

        if (!visited[currentVertex]) {
            printf("%d ", currentVertex);
            visited[currentVertex] = 1;
        }

        // Push all adjacent unvisited vertices onto the stack
        AdjListNode* temp = graph->array[currentVertex].head;
        while (temp) {
            if (!visited[temp->dest]) {
                stack[++top] = temp->dest;
            }
            temp = temp->next;
        }
    }
}

// Function to perform DFS traversal of the entire graph
void DFS(Graph* graph, int startVertex) {
    int visited[graph->V];
    for (int i = 0; i < graph->V; ++i)
        visited[i] = 0;

    DFSUtil(graph, startVertex, visited);
}

int main() {
    int V, E;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    Graph* graph = createGraph(V);

    printf("Enter the number of edges: ");
    scanf("%d", &E);

    printf("Enter the edges (src dest):\n");
    for (int i = 0; i < E; ++i) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    int startVertex;
    printf("Enter the starting vertex for DFS: ");
    scanf("%d", &startVertex);

    printf("DFS Traversal starting from vertex %d:\n", startVertex);
    DFS(graph, startVertex);

    return 0;
}
input 
Enter the number of vertices: 5
Enter the number of edges: 6
Enter the edges (src dest):
0 1
0 2
1 2
1 3
2 4
3 4
Enter the starting vertex for DFS: 0
