#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

typedef struct {
    int top;
    char items[MAX];
} Stack;

void push(Stack *s, char value) {
    if (s->top == (MAX - 1)) {
        printf("Stack Overflow\n");
        return;
    }
    s->items[++(s->top)] = value;
}

char pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack Underflow\n");
        exit(1);
    }
    return s->items[(s->top)--];
}

char peek(Stack *s) {
    if (s->top == -1) {
        printf("Stack Underflow\n");
        exit(1);
    }
    return s->items[s->top];
}

int is_empty(Stack *s) {
    return s->top == -1;
}

int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
    }
    return 0;
}

int is_operator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
}

void reverse(char *exp) {
    int len = strlen(exp);
    for (int i = 0; i < len / 2; ++i) {
        char temp = exp[i];
        exp[i] = exp[len - i - 1];
        exp[len - i - 1] = temp;
    }
}

void infix_to_postfix(char infix[], char postfix[]) {
    Stack s;
    s.top = -1;
    int i = 0, j = 0;
    char ch;

    while ((ch = infix[i++]) != '\0') {
        if (isdigit(ch) || isalpha(ch)) {
            postfix[j++] = ch;
        } else if (ch == '(') {
            push(&s, ch);
        } else if (ch == ')') {
            while (!is_empty(&s) && (ch = pop(&s)) != '(') {
                postfix[j++] = ch;
            }
        } else if (is_operator(ch)) {
            while (!is_empty(&s) && precedence(peek(&s)) >= precedence(ch)) {
                postfix[j++] = pop(&s);
            }
            push(&s, ch);
        }
    }
    while (!is_empty(&s)) {
        postfix[j++] = pop(&s);
    }
    postfix[j] = '\0';
}

void infix_to_prefix(char infix[], char prefix[]) {
    int len = strlen(infix);
    char reversed_infix[MAX];
    char reversed_postfix[MAX];

    strcpy(reversed_infix, infix);
    reverse(reversed_infix);

    for (int i = 0; i < len; ++i) {
        if (reversed_infix[i] == '(') {
            reversed_infix[i] = ')';
        } else if (reversed_infix[i] == ')') {
            reversed_infix[i] = '(';
        }
    }

    infix_to_postfix(reversed_infix, reversed_postfix);
    reverse(reversed_postfix);
    strcpy(prefix, reversed_postfix);
}

int evaluate_prefix(char prefix[]) {
    Stack s;
    s.top = -1;
    int len = strlen(prefix);

    for (int i = len - 1; i >= 0; --i) {
        if (isdigit(prefix[i])) {
            push(&s, prefix[i] - '0');
        } else if (is_operator(prefix[i])) {
            int op1 = pop(&s);
            int op2 = pop(&s);
            switch (prefix[i]) {
                case '+': push(&s, op1 + op2); break;
                case '-': push(&s, op1 - op2); break;
                case '*': push(&s, op1 * op2); break;
                case '/': push(&s, op1 / op2); break;
                case '^': push(&s, op1 ^ op2); break;
            }
        }
    }
    return pop(&s);
}

int main() {
    char infix[MAX], prefix[MAX];

    printf("Enter infix expression: ");
    scanf("%s", infix);

    infix_to_prefix(infix, prefix);

    printf("Prefix expression: %s\n", prefix);
    printf("Evaluation result: %d\n", evaluate_prefix(prefix));

    return 0;
}
//Enter infix expression: 3+(2*4)-5
//Prefix expression: -+3*24 5
//Evaluation result: 6
