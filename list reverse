#include <stdio.h>
#include <stdlib.h>

// Definition of the Node structure
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to reverse the linked list iteratively
void Reverse(Node** headRef) {
    Node* prev = NULL;
    Node* current = *headRef;
    Node* next = NULL;
    
    while (current != NULL) {
        next = current->next;  // Store the next node
        current->next = prev;  // Reverse the current node's pointer
        prev = current;        // Move the prev pointer one step forward
        current = next;        // Move the current pointer one step forward
    }
    
    *headRef = prev;  // Update the head pointer to the new first node
}

// Function to print the linked list
void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function to demonstrate the reverse function
int main() {
    // Creating a linked list
    Node* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);
    head->next->next->next = createNode(4);
    head->next->next->next->next = createNode(5);
    
    printf("Original List: ");
    printList(head);
    
    // Reversing the linked list
    Reverse(&head);
    
    printf("Reversed List: ");
    printList(head);
    
    return 0;
}
